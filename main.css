@charset "UTF-8";
/**
Нормализация блочной модели
*/
*,
::before,
::after {
  box-sizing: border-box;
}

/**
Убираем внутренние отступы слева тегам списков,
у которых есть атрибут class
*/
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
Убираем внешние отступы body и двум другим тегам,
у которых есть атрибут class
*/
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
	Убираем внешние отступы вертикали нужным тегам,
	у которых есть атрибут class
*/
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
	Убираем стандартный маркер маркированному списку,
	у которого есть атрибут class
*/
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
	Обнуляем вертикальные внешние отступы параграфа,
	объявляем локальную переменную для внешнего отступа вниз,
	чтобы избежать взаимодействие с более сложным селектором
*/
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
	Внешний отступ вниз для параграфа без атрибута class,
	который расположен не последним среди своих соседних элементов
*/
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
	Упрощаем работу с изображениями и видео
*/
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
	Наследуем свойства шрифт для полей ввода
*/
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
  Пригодится в большинстве ситуаций
  (когда, например, нужно будет "прижать" футер к низу сайта)
  */
  height: 100%;
  /**
  Убираем скачок интерфейса по горизонтали
  при появлении / исчезновении скроллбара
  */
  scrollbar-gutter: stable;
}

/**
	Плавный скролл
*/
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
  Пригодится в большинстве ситуаций
  (когда, например, нужно будет "прижать" футер к низу сайта)
  */
  min-height: 100%;
  /**
  Унифицированный интерлиньяж
  */
  line-height: 1.5;
}

/**
	Нормализация высоты элемента ссылки при его инспектировании в DevTools
*/
a:where([class]) {
  display: inline-flex;
}

/**
	Курсор-рука при наведении на элемент
*/
button,
label {
  cursor: pointer;
}

/**
	Приводим к единому цвету svg-элементы
	(за исключением тех, у которых уже указан
	атрибут fill со значением 'none' или начинается с 'url')
*/
:where([fill]:not([fill=none],
[fill^=url])) {
  fill: currentColor;
}

/**
	Приводим к единому цвету svg-элементы
	(за исключением тех, у которых уже указан
	атрибут stroke со значением 'none')
*/
:where([stroke]:not([stroke=none],
[stroke^=url])) {
  stroke: currentColor;
}

/**
	Чиним баг задержки смены цвета при взаимодействии с svg-элементами
*/
svg * {
  transition-property: fill, stroke;
}

/**
	Приведение рамок таблиц в классический 'collapse' вид
*/
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

input[type=search]::-webkit-search-decoration,
input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-results-button,
input[type=search]::-webkit-search-results-decoration {
  display: none;
}

/**
	Удаляем все анимации и переходы для людей,
	которые предпочитают их не использовать
*/
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
@font-face {
  font-family: "Inter";
  src: url("/fonts/inter-regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Kanit";
  src: url("/fonts/kanit-regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Kanit";
  src: url("/fonts/kanit-medium.woff2") format("woff2");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
/* Миксин, который расчитывает динамически размер шрифта,
средний параметр(рекомендуемое значение) расчитывается исходя из
первого параметра делённого на максимальную
ширину лендинга помноженного на 100% высоту экрана
*/
/* Миксин для тегов наследования цвета от родителя
и сброс нижнего подчёркивания ссылок
*/
/* Миксин для сброса дефолтных
свойств у кнопок
*/
/* Миксин для задания блоку или строчному объекту
нужный дисплей + центрирование 
*/
/* Миксин для центрирования
у псевдоэлементов
*/
/* Миксин, который настраивает изображение 
в равные пропорции
*/
:root {
  --color-background-s: #F7F7F7;
  --color-accent: #252525;
  --color-input-background: #6C63FF;
  --color-input-placeholder: #C3C1E5;
  --color-input-focus: #6C63FF;
  --color-input-dark: #666666;
  --color-purple-light: #aba6ff;
  --color-purple: #6C63FF;
  --color-purple-dark: #5850DD;
  --color-dark: #252525;
  --color-red-light: #ff9b9b;
  --color-red: #E50000;
  --color-option: #CDCDCD;
  --border: 1px solid var(--color-input-background);
  --outline: 2px solid var(--color-purple);
  --border-radius: 5px;
  --border-radius-small: 2px;
  --border-radius-large: 16px;
  --font-famaly-base:"Kanit", sans-serif;
  --container-width: 750px;
  --container-padding-x: 16px;
  --section-padding-y: 30px;
  --block-padding-y: 18px;
  --block-padding-x: 16px;
  --inter-height: 38px;
  --transition-duration: .1s;
}

.darkmode {
  --color-background-s: #252525;
  --color-accent:#F7F7F7;
  --color-input-background:#F7F7F7;
  --color-input-placeholder: #666666;
  --color-input-focus: #F7F7F7;
  --color-purple-light: #aba6ff;
  --color-purple: #6C63FF;
  --color-purple-dark: #5850DD;
  --color-red-light: #ff9b9b;
  --color-red: #E50000;
  --color-option: #CDCDCD;
  --border: 1px solid var(--color-input-background);
  --border-btn: 1px solid var(--color-purple);
  --outline: 2px solid var(--color-purple);
  --border-radius: 5px;
  --border-radius-small: 2px;
  --border-radius-large: 16px;
  --font-famaly-base:"Kanit", sans-serif;
  --container-width: 750px;
  --container-padding-x: 16px;
  --section-padding-y: 30px;
  --block-padding-y: 18px;
  --block-padding-x: 16px;
  --inter-height: 38px;
  --transition-duration: .1s;
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@media (max-width: 735px) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (min-width: 736px) {
  .visible-mobile {
    display: none !important;
  }
}

body {
  font-size: clamp(16px, 1.3888888889vw, 20px);
  font-family: var(--font-famaly-base);
  font-weight: 400;
  line-height: 1;
  color: var(--color-accent);
  background-color: var(--color-background-s);
}

a, button, input, select, textarea, svg * {
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
  color: inherit;
}

h1, h2, h3, h4 {
  font-weight: 500;
}

h1 {
  font-size: clamp(24px, 1.8055555556vw, 26px);
}

h2 {
  font-size: clamp(18px, 1.6666666667vw, 24px);
}

.input {
  font-size: clamp(14px, 1.1111111111vw, 16px);
  height: var(--inter-height);
  padding: 11px 16px;
  border-radius: var(--border-radius);
  border: var(--border);
  background-color: var(--color-background-s);
  color: var(--color-accent);
  outline: none;
}
.input::placeholder {
  font-size: clamp(14px, 1.1111111111vw, 16px);
  font-family: "Inter";
  color: var(--color-input-placeholder);
}
.input:focus {
  outline: 2px solid color-mix(in srgb, var(--color-input-focus) 30%, transparent);
}
.input.input__checkbox {
  width: 26px;
  height: 26px;
  appearance: none;
  position: relative;
  padding: 0;
  margin: 0;
  border: 1px solid var(--color-purple);
}
.input.input__checkbox:focus {
  outline: none;
}
@media (hover: hover) {
  .input.input__checkbox:hover {
    border: 2px solid var(--color-purple);
  }
}
@media (hover: none) {
  .input.input__checkbox:active {
    border: 2px solid var(--color-purple);
  }
}
.input.input__warning {
  outline: 2px solid color-mix(in srgb, var(--color-red) 40%, transparent);
  border: 1px solid var(--color-red);
}
.input.input__warning::placeholder {
  color: var(--color-red);
}
.input.input__warning::-webkit-input-placeholder {
  color: var(--color-red);
}
.input.input__warning::-moz-placeholder {
  color: var(--color-red);
}
.input.input__warning:-ms-input-placeholder {
  color: var(--color-red);
}

.select {
  font-size: clamp(14px, 1.1111111111vw, 16px);
  width: 93px;
  height: var(--inter-height);
  padding-left: 10px;
  border-radius: var(--border-radius);
  border: none;
  background-color: var(--color-purple);
  color: #F7F7F7;
  outline: none;
}
.select:focus {
  outline: 2px solid var(--color-purple);
  outline-offset: -1px;
  background-color: var(--color-purple-dark);
}

.btn {
  padding: 0;
  background-color: transparent;
  border: none;
  outline-offset: -1px;
  position: relative;
  border-radius: var(--border-radius);
  background-color: var(--color-purple);
  color: #F7F7F7;
  font-family: "Kanit";
  font-weight: 500;
  text-transform: uppercase;
}
@media (hover: hover) {
  .btn:hover {
    background-color: var(--color-purple-dark);
  }
}
@media (hover: none) {
  .btn:active {
    background-color: var(--color-purple-dark);
  }
}
.btn:focus {
  background-color: var(--color-purple-light);
  outline: 2px solid var(--color-purple);
}
.btn:disabled {
  background-color: var(--color-purple-light);
}
.btn > svg {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  fill: #F7F7F7;
}
.btn.btn__circle {
  border-radius: 50%;
}
.btn.btn__circle:focus {
  outline: var(--outline);
}
.btn.btn__option {
  width: 18px;
  aspect-ratio: 1;
  background: none;
  stroke: var(--color-option);
  fill: none;
  outline: none;
}
.btn.btn__option > svg {
  fill: none;
}
@media (hover: hover) {
  .btn.btn__option--pen:hover {
    stroke: var(--color-purple-light);
  }
}
@media (hover: none) {
  .btn.btn__option--pen:active {
    stroke: var(--color-purple-light);
  }
}
.btn.btn__option--pen:focus {
  stroke: var(--color-purple);
}
@media (hover: hover) {
  .btn.btn__option--trash:hover {
    stroke: var(--color-red-light);
  }
}
@media (hover: none) {
  .btn.btn__option--trash:active {
    stroke: var(--color-red-light);
  }
}
.btn.btn__option--trash:focus {
  stroke: var(--color-red);
}
.btn.btn__reverse {
  background-color: transparent;
  border: var(--border-btn);
  color: var(--color-purple);
}
@media (hover: hover) {
  .btn.btn__reverse:hover {
    border: 2px solid var(--color-purple-dark);
    color: var(--color-purple-dark);
  }
}
@media (hover: none) {
  .btn.btn__reverse:active {
    border: 2px solid var(--color-purple-dark);
    color: var(--color-purple-dark);
  }
}
.btn.btn__reverse:focus {
  outline: 3px solid rgba(108, 99, 255, 0.4);
  border: var(--border);
  color: var(--color-purple-light);
}

.header__body {
  padding-top: 40px;
  text-align: center;
}
.header__title:not(:last-child) {
  margin-bottom: var(--block-padding-y);
}
.header__form {
  position: relative;
  display: flex;
  justify-content: center;
  height: 38px;
  column-gap: var(--block-padding-x);
}
.header__form::before {
  content: "";
  width: 21px;
  aspect-ratio: 1;
  position: absolute;
  top: 50%;
  left: 74%;
  transform: translateY(-50%);
  background: url("/icon/Lypa-light.svg") center/contain no-repeat;
  pointer-events: none;
}
.darkmode .header__form::before {
  content: "";
  width: 21px;
  aspect-ratio: 1;
  position: absolute;
  top: 50%;
  left: 74%;
  transform: translateY(-50%);
  background: url("/icon/Lypa-dark.svg") center/contain no-repeat;
  pointer-events: none;
}
@media (max-width: 735px) {
  .header__form {
    flex-wrap: wrap;
    justify-content: center;
    row-gap: var(--block-padding-y);
  }
}
.header__input {
  width: 595px;
  padding-right: 43px;
}
@media (max-width: 735px) {
  .header__input {
    width: 725px;
    max-width: 100%;
  }
}

.hero__body {
  position: relative;
  display: flex;
  column-gap: 57px;
  padding-top: var(--section-padding-y);
}
@media (max-width: 735px) {
  .hero__body {
    column-gap: 0;
    flex-direction: column;
  }
}
.hero__menu {
  display: flex;
  justify-content: center;
  width: 100%;
}
.hero__list {
  width: 100%;
}
.hero__description {
  display: flex;
  column-gap: 17px;
}
.hero__item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-block: 17px;
}
.hero__item:not(:last-child) {
  border-bottom: 1px solid color-mix(in srgb, var(--color-purple) 50%, transparent);
}
.hero__item.hide {
  display: none;
}
.hero__description {
  align-items: center;
}
.hero__title.complete {
  position: relative;
  color: var(--color-accent);
  opacity: 0.5;
  transition-duration: inherit;
}
.hero__title.complete::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 0;
  width: 100%;
  height: 2px;
  background-color: currentColor;
}
.hero__input.complete {
  outline: none;
  content: "";
  position: relative;
  background: url("/icon/galka.svg") center no-repeat;
  background-color: var(--color-purple);
}
.hero__btn {
  align-self: end;
  position: fixed;
  top: 80%;
  left: 75%;
  width: 50px;
  height: 50px;
}
@media (max-width: 735px) {
  .hero__btn {
    width: 40px;
    height: 40px;
    align-self: center;
  }
}
.hero__empty-img {
  margin: auto;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
.hero__empty-description {
  margin-top: 20px;
  text-align: center;
  margin-bottom: 20px;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.modal {
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  inset: 0;
  padding: 30px 16px;
  background-color: color-mix(in srgb, #252525 70%, transparent);
  cursor: pointer;
  overflow-y: auto;
  transition: 0.1s;
}
.modal__main {
  /*
  Крч, если в modal просто прописать display:flex и в его дочернем элементе
  margin: auto то этот элемент расположиться по центру, оставлю как один из способов
  позиционирования
  */
  position: relative;
  display: flex;
  flex-direction: column;
  width: 500px;
  height: 290px;
  padding: 18px 30px;
  background-color: var(--color-background-s);
  border: 1px solid var(--color-input-background);
  border-radius: var(--border-radius-large);
  cursor: default;
}
@media (max-width: 735px) {
  .modal__main {
    max-width: 100%;
  }
}
.modal__title {
  text-align: center;
}
.modal__title:not(:last-child) {
  margin-bottom: 25px;
}
.modal__input {
  height: auto;
  width: 440px;
}
@media (max-width: 735px) {
  .modal__input {
    max-width: 100%;
  }
}
.modal__inner {
  display: flex;
  justify-content: space-between;
  margin-top: auto;
}
.modal__btn {
  width: 110px;
  height: 38px;
}
@media (max-width: 735px) {
  .modal__btn {
    max-width: 100%;
  }
}
.modal__text {
  margin-top: 20px;
  text-align: center;
  color: var(--color-red);
}

.theme button:last-child {
  display: none;
}
.theme__btn {
  width: 38px;
  aspect-ratio: 1;
}

.darkmode .theme button:first-child {
  display: none;
}
.darkmode .theme button:last-child {
  display: block;
}

/*# sourceMappingURL=main.css.map */
